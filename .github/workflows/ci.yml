name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
      skip_deploy:
        description: 'Skip deployment after build'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '22'
  SUPABASE_PROJECT_REF: cuthalxqxkonmfzqjdvw
  SUPABASE_URL: https://cuthalxqxkonmfzqjdvw.supabase.co
  SUPABASE_ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImN1dGhhbHhxeGtvbm1menFqZHZ3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ1MTc4MTIsImV4cCI6MjA3MDA5MzgxMn0.-W7haFEUs1IaQRXY_M-aL-lpAtXPhcVsQFbQhQbMpSI

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    name: 🔎 Detect changes
    outputs:
      functions: ${{ steps.filter.outputs.functions }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      - name: 🔎 Paths filter
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            functions:
              - 'supabase/functions/**'
  test:
    runs-on: ubuntu-latest
    name: 🧪 Test & Quality
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: npm ci
    
    - name: 🔍 Run linting
      run: npm run lint
    
    - name: 🔍 Run type checking
      run: npx tsc -p tsconfig.json
    
    - name: 🧪 Run tests
      run: echo "No tests configured yet"
    
    - name: 📊 Upload coverage to Codecov (TEMPORANEO DISABILITATO)
      run: echo "Coverage upload temporaneamente disabilitato per deploy urgente"
      # uses: codecov/codecov-action@v3
      # with:
      #   file: ./coverage/lcov.info
      #   flags: unittests
      #   name: codecov-umbrella

  build:
    runs-on: ubuntu-latest
    needs: test
    name: 📦 Build Application
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: npm ci
    
    - name: 🔨 Build application (development)
      run: npm run build:dev
      env:
        VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
    
    - name: 🔨 Build application (production)
      run: npm run build
      env:
        VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
    
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          dist/
          supabase/functions/
        retention-days: 30

  database-migration:
    runs-on: ubuntu-latest
    needs: [test, build]
    name: 🗄️ Database Migration
    if: false
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📦 Install Supabase CLI
      run: |
        rm -f supabase-cli
        wget -qO- https://github.com/supabase/cli/releases/latest/download/supabase_linux_amd64.tar.gz | tar xz
        sudo mv supabase /usr/local/bin/
        supabase --version
    
    - name: 🔐 Login to Supabase
      run: |
        echo ${{ secrets.SUPABASE_ACCESS_TOKEN }} | supabase login
    
    - name: 🔗 Deploy Edge Function
      run: |
        supabase functions deploy public-match-registration --project-ref ${{ env.SUPABASE_PROJECT_REF }}
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

  deploy-preview:
    runs-on: ubuntu-latest
    needs: [test, build]
    name: 🚀 Deploy Preview
    if: false
    environment: preview
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: ./
    
    - name: 🚀 Deploy Preview to Netlify
      uses: nwtgck/actions-netlify@v2.0
      with:
        publish-dir: './dist'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Preview Deploy - ${{ github.sha }}"
        enable-pull-request-comment: false
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID_PRODUCTION }}
    
    - name: 🔧 Install Supabase CLI
      run: |
        curl -fsSL https://supabase.com/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: 🔗 Deploy Edge Functions
      run: |
        echo ${{ secrets.SUPABASE_ACCESS_TOKEN }} | supabase login
        supabase link --project-ref ${{ env.SUPABASE_PROJECT_REF }}
        supabase functions deploy
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, build]
    name: 🚀 Deploy to Production
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.skip_deploy != true)
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: ./
    
    - name: 🚀 Deploy to Netlify (Production)
      uses: nwtgck/actions-netlify@v2.0
      with:
        publish-dir: './dist'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy to Production - ${{ github.sha }}"
        enable-pull-request-comment: false
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID_PRODUCTION }}

  deploy-edge-functions:
    runs-on: ubuntu-latest
    needs: [build, detect-changes]
    name: 🔗 Deploy Edge Functions (public)
    if: github.ref == 'refs/heads/main' && needs.detect-changes.outputs.functions == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🧰 Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: 🔐 Login to Supabase
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          echo "$SUPABASE_ACCESS_TOKEN" | supabase login

      - name: 🚀 Deploy public-registration & public-match-registration
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          supabase functions deploy public-registration --project-ref ${{ env.SUPABASE_PROJECT_REF }}
          supabase functions deploy public-match-registration --project-ref ${{ env.SUPABASE_PROJECT_REF }}

  apply-migrations:
    runs-on: ubuntu-latest
    needs: [build]
    name: 🗄️ Apply DB Migrations
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🧰 Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: 🔐 Login & Link project
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          echo "$SUPABASE_ACCESS_TOKEN" | supabase login
          supabase link --project-ref ${{ env.SUPABASE_PROJECT_REF }}

      - name: 🚀 Push migrations
        run: supabase db push

  security-scan:
    runs-on: ubuntu-latest
    needs: [test, build]
    name: 🔒 Security Scan
    if: false
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔒 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: 📤 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'